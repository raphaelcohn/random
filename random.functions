# This file is part of shellfire random. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/shellfire-dev/random/master/COPYRIGHT. No part of shellfire random, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2014-2015 The developers of shellfire random. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/shellfire-dev/random/master/COPYRIGHT.


random_generateBetween0To255()
{
	if core_variable_isUnset _random_generateBetween0To255_implementation; then
		_random_generateBetween0To255_determineImplementation
	fi
	
	${_random_generateBetween0To255_implementation}
}

random_generateBetween0AndModulus()
{
	local modulus=$1
	local randomNumber="$(random_generateBetween0To255)"
	printf '%s' $(($randomNumber % $modulus))
}

random_characterForEncodingLowerCaseOnly()
{
	local number0To35=$(random_generateBetween0AndModulus 36)
	if [ $number0To35 -lt 26 ]; then
		local subtract=0
		local base=97
	else
		local subtract=26
		local base=48
	fi
	printf '%s' $((number0To35 - subtract + base))
}

random_characterForEncodingLettersAndNumbers()
{
	local number0To61=$(random_generateBetween0AndModulus 62)
	if [ $number0To61 -lt 26 ]; then
		local subtract=0
		local base=65
	elif [ $number0To61 -lt 52 ]; then
		local subtract=26
		local base=97
	else
		local subtract=52
		local base=48
	fi
	printf '%s' $((number0To61 - subtract + base))
}

random_characterForEncodingBase64Like()
{
	local number0To63=$(random_generateBetween0AndModulus 64)
	if [ $number0To63 -lt 26 ]; then
		local subtract=0
		local base=65
	elif [ $number0To63 -lt 52 ]; then
		local subtract=26
		local base=97
	elif [ $number0To63 -lt 62 ]; then
		local subtract=52
		local base=48
	elif [ $number0To63 -lt 63 ]; then
		local subtract=62
		local base=47
	else
		local subtract=63
		local base=43
	fi
	printf '%s' $((number0To63 - subtract + base))
}

core_dependency_oneOf '*' hexdump od openssl gpg awk
random_generateBetween0To255_hexdump()
{
	printf '%s' "$(hexdump -e '/1 "%u"' -n 1 "$_random_generateBetween0To255_randomFile")"
}

random_generateBetween0To255_od()
{
	# MacOSX od has lots of leading whitespace and two \n
	# GNU coreutils od has one to three leading whitespace and single \n
	
	# The UNQUOTED $(...) capture ensures all leading whitespace is removed
	# The $(...) capture ensures all trailing \n (single or multiple) are removed
	printf '%s' $(od -A n -t u1 -N1 "$_random_generateBetween0To255_randomFile")
}

random_generateBetween0To255_openssl()
{
	printf '%d' 0x$(openssl rand -hex 1)
}

random_generateBetween0To255_gpgHexdump()
{
	printf '%s' "$(gpg --gen-random 1 1 | hexdump -e '/1 "%u"')"
}

random_generateBetween0To255_gpgOd()
{
	# The UNQUOTED $(...) capture ensures all leading whitespace is removed
	# The $(...) capture ensures all trailing \n (single or multiple) are removed
	printf '%s' $(gpg --gen-random 1 1 | od -A n -t u1)
}

random_generateBetween0To255_RANDOM()
{
	printf '%s' $(( RANDOM % 256 ))
}

# seed is time based and I have seen identical values output when invoked in a very tight loop.
random_generateBetween0To255_awk()
{
	echo | awk ' { srand(); print int((rand()*1000000)%256)} '
}

_random_generateBetween0To255_determineImplementation()
{	
	_random_generateBetween0To255_randomFile=''
	local randomFilePath
	for randomFilePath in /dev/urandom /dev/random
	do
		if [ -r "$randomFilePath" ]; then
			_random_generateBetween0To255_randomFile="$randomFilePath"
			break
		fi
	done

	if [ -n "$_random_generateBetween0To255_randomFile" ]; then
		if core_compatibility_whichNoOutput hexdump; then
			_random_generateBetween0To255_implementation=random_generateBetween0To255_hexdump
			return 0
		fi
		if core_compatibility_whichNoOutput od; then
			_random_generateBetween0To255_implementation=random_generateBetween0To255_od
			return 0
		fi
	fi

	if core_compatibility_whichNoOutput openssl; then
		_random_generateBetween0To255_implementation=random_generateBetween0To255_openssl
		return 0
	fi
	
	if core_compatibility_whichNoOutput gpg; then
		if core_compatibility_whichNoOutput hexdump; then
			_random_generateBetween0To255_implementation=random_generateBetween0To255_gpgHexdump
			return 0
		fi
		if core_compatibility_whichNoOutput od; then
			_random_generateBetween0To255_implementation=random_generateBetween0To255_gpgOd
			return 0
		fi
	fi	
	
	# Nearly everything has this bar dash and original sh, although ash in BuysBox can be configured without it
	if core_variable_isSet RANDOM; then
		_random_generateBetween0To255_implementation=random_generateBetween0To255_RANDOM
		core_message WARN "Non-cryptographic randomness source selected (built-in RANDOM function)"
		return 0
	fi

	if core_compatibility_whichNoOutput awk; then
		_random_generateBetween0To255_implementation=random_generateBetween0To255_awk
		core_message WARN "Non-cryptographic randomness source selected (awk's srand)"
		return 0
	fi
	
	core_exitError $core_commandLine_exitCode_OSFILE "No source of randomess could be used"
}
